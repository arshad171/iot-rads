#include "settings/dnn.h"
#include "src/utils/common.h"
#include "src/camera/camera.h"
#include "src/dnn/network.h"

// Communication stack
#include "src/communication/serial/serial.h"
#include "src/communication/protocol.h"

// Platform settings
#include "settings/device.h"
#include "src/dnn/distributed/central.h"

// External libraries
#include <ArduinoBLE.h>
#include <Arduino_OV767X.h>
#include <BasicLinearAlgebra.h>

static RichMatrix *feature_vector = nullptr;

void request_feature_vector()
{
  LOG_SHORT(LOG_DEBUG, "Requesting feature vector...");
  pack(nullptr, 0, DType::CMD, Cmd::GET_FEATURE_VECTOR, &SP);
}

bool receive_feature_vector(int batchIndex)
{
  bool success = false;
  bool awaitResponse = true;

  for (int maxIters = 10; (maxIters > 0) && (awaitResponse); maxIters--)
  {
    Packet incoming = SP.recv();
    bool should_free = true;

    // // Stop when we process all incoming packets
    if (incoming.header.magic[0] == 0)
    {
      continue;
    }

    LOG_SHORT(LOG_DEBUG, "Received packet with %d byte payload", incoming.header.size);

    switch (incoming.header.command)
    {
    case Cmd::SET_FEATURE_VECTOR:
    {
      if (incoming.header.type != DType::MAT)
      {
        LOG(LOG_ERROR, "Received feature vector of wrong type %d", incoming.header.type);
        break;
      }

      LOG_SHORT(LOG_DEBUG, "Received %dx%d feature vector", feature_vector->metadata.rows, feature_vector->metadata.cols);
      if (feature_vector != nullptr && should_free)
      {
        free(feature_vector);
        LOG_SHORT(LOG_DEBUG, "Old feature vector discarded");
      }

      feature_vector = (RichMatrix *)incoming.data;

      const int size = feature_vector->metadata.rows * feature_vector->metadata.cols;

      LOG_SHORT(LOG_INFO, "size: %d", size);

      float features[size] = {0.0};

      memcpy(features, feature_vector->data, size * sizeof(float));

      for (int r = 0; r < xBatch.Rows; r++)
      {
        xBatch(r, batchIndex) = features[r];
      }

      should_free = false; // DO NOT FREE! The training data stays until replaced
      awaitResponse = false;
      success = true;
      break;
    }
    }
  }
  return success;
}

void setup()
{
  // Setup the board's status indicators
  PINMODE(LEDR, OUTPUT);
  PINMODE(LEDG, OUTPUT);
  PINMODE(LEDB, OUTPUT);
  PINMODE(LED_PWR, OUTPUT);
  DWRITE(LEDR, 1);
  DWRITE(LEDG, 1);
  DWRITE(LEDB, 1);
  DWRITE(LED_PWR, 0);

  // Initialize serial port
  SP.initialize(BAUD_RATE, 1000);

  // Setup logging
  set_log_lvl(LOG_LEVEL);
  toggle_logs(true);

  // Wait on the serial and notify user
  DWRITE(LEDB, 0);
  SP.blocking_wait(0);
  DWRITE(LEDB, 1);

  // Greet the user and present hardware info
  LOG_SHORT(LOG_INFO, "Railway Anomaly Detection System v%s", FW_VERSION);

  // Tell the user we completed setup
  DWRITE(LED_PWR, 1);

  central_setup();
}

void loop()
{
  // check if a peripheral has been discovered
  peripheral = BLE.available();
  BLEserviceConnect();
  readCharacteristic = peripheral.characteristic("2A36");
  writeCharacteristic = peripheral.characteristic("2A37");

  if (readCharacteristic.subscribe())
  {
    LOG_SHORT(LOG_INFO, "BLE::subscribed to read characteristics");
  }

  value = peripheral.connected();
  while (value)
  {
    if (readCharacteristic.valueUpdated())
    {
      receive();
      send();
      delay(10);
    }
    if (stopFlag)
    {

      if (trainflag == 0)
      {
        train();
        stopFlag = false;
        receiveWeightsBuffer.stopFlag = false;
      }
      trainflag += 1;
      if (trainflag > 1)
      {
        trainflag = 0;
      }
    }
  }
  delay(10);
  BLE.scanForUuid("19b10011-e8f2-537e-4f6c-d104768a1214");
  delay(10);
}